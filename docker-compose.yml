services:
  mongodb:
      image: mongo:latest
      container_name: mongodb
      restart: unless-stopped
      ports:
        - 27017:27017
      expose:
        - 27017
      volumes:
        -  ./data:/data/db
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
      networks:
        - custom
#      restart: always
      healthcheck:
#        test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
        test:
          ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
#          [
#            "CMD",
#            "mongosh",
#            "--quiet",
#            "localhost/test",
#            "--eval",
#            "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
#          ]
        interval: 10s
        timeout: 10s
        retries: 5
        start_period: 40s


  application:
      build: .
      container_name: application
      command: sh -c "python main.py"
      ports:
        - '8000:8000'
      depends_on:
        mongodb:
          condition: service_healthy
#      env_file:
#        - .env.docker
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
      volumes:
        - .:/code
      networks:
        - custom

networks:
  custom:
    driver: bridge

#  mongo:
#    image: mongo:latest
#    container_name: mongo
#    ports:
#      - '27017:27017'

#  postgres2:
#    image: postgres
#    restart: always
#    container_name: postgres2
#    env_file:
#      - .env.docker
#    environment:
##      POSTGRES_USER: ${POSTGRES_USER}
##      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
##      POSTGRES_DB: ${POSTGRES_DB}
#      PGDATA: /var/lib/postgresql/pgdata
#    volumes:
#      - pgdata2:/var/lib/postgresql/pgdata
#    ports:
#      - '5432:5432'
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

#  application:
#    build: .
#    container_name: application
#    command: sh -c "python main.py"
#    ports:
#      - '8000:8000'
#    depends_on:
#      mongo
##        condition: service_healthy
#    env_file:
#      - .env.docker
#    volumes:
#      - .:/code

#  celery_worker2:
#    build: .
#    container_name: celery_worker2
#    tty: true
#    command: celery -A config worker -l INFO -P eventlet
#    env_file:
#      - .env.docker
#    depends_on:
#      - redis2
#      - app2
#      - postgres2
#
#  celery_beat2:
#    build: .
#    container_name: celery_beat2
#    tty: true
#    command: celery -A config beat -l INFO
#    env_file:
#      - .env.docker
#    depends_on:
#      - redis2
#      - app2
#      - postgres2

#volumes:
#  pgdata2: